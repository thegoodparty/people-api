import { RaceFilterDto } from './races.schema';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
declare const RacesService_base: {
    new (): {
        readonly _prisma: PrismaService;
        readonly logger: import("@nestjs/common").Logger;
        readonly model: Prisma.RaceDelegate<import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
        readonly client: import(".prisma/client").PrismaClient;
        onModuleInit(): void;
        findUnique: <T extends Prisma.RaceFindUniqueArgs>(args: Prisma.SelectSubset<T, Prisma.RaceFindUniqueArgs<import("@prisma/client/runtime/library").DefaultArgs>>) => Prisma.Prisma__RaceClient<import("@prisma/client/runtime/library").GetFindResult<Prisma.$RacePayload<import("@prisma/client/runtime/library").DefaultArgs>, T, Prisma.PrismaClientOptions> | null, null, import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
        findUniqueOrThrow: <T extends Prisma.RaceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, Prisma.RaceFindUniqueOrThrowArgs<import("@prisma/client/runtime/library").DefaultArgs>>) => Prisma.Prisma__RaceClient<import("@prisma/client/runtime/library").GetFindResult<Prisma.$RacePayload<import("@prisma/client/runtime/library").DefaultArgs>, T, Prisma.PrismaClientOptions>, never, import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
        findFirst: <T extends Prisma.RaceFindFirstArgs>(args?: Prisma.SelectSubset<T, Prisma.RaceFindFirstArgs<import("@prisma/client/runtime/library").DefaultArgs>> | undefined) => Prisma.Prisma__RaceClient<import("@prisma/client/runtime/library").GetFindResult<Prisma.$RacePayload<import("@prisma/client/runtime/library").DefaultArgs>, T, Prisma.PrismaClientOptions> | null, null, import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
        findFirstOrThrow: <T extends Prisma.RaceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, Prisma.RaceFindFirstOrThrowArgs<import("@prisma/client/runtime/library").DefaultArgs>> | undefined) => Prisma.Prisma__RaceClient<import("@prisma/client/runtime/library").GetFindResult<Prisma.$RacePayload<import("@prisma/client/runtime/library").DefaultArgs>, T, Prisma.PrismaClientOptions>, never, import("@prisma/client/runtime/library").DefaultArgs, Prisma.PrismaClientOptions>;
        findMany: <T extends Prisma.RaceFindManyArgs>(args?: Prisma.SelectSubset<T, Prisma.RaceFindManyArgs<import("@prisma/client/runtime/library").DefaultArgs>> | undefined) => Prisma.PrismaPromise<import("@prisma/client/runtime/library").GetFindResult<Prisma.$RacePayload<import("@prisma/client/runtime/library").DefaultArgs>, T, Prisma.PrismaClientOptions>[]>;
        count: <T extends Prisma.RaceCountArgs>(args?: Prisma.Subset<T, Prisma.RaceCountArgs>) => Prisma.PrismaPromise<T extends import("@prisma/client/runtime/library").Record<"select", any> ? T["select"] extends true ? number : Prisma.GetScalarType<T["select"], Prisma.RaceCountAggregateOutputType> : number>;
    };
};
export declare class RacesService extends RacesService_base {
    private readonly prisma;
    constructor(prisma: PrismaService);
    findRaces(filterDto: RaceFilterDto): Promise<{
        Place: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            brDatabaseId: number;
            slug: string;
            state: string;
            name: string;
            geoId: string;
            mtfcc: string | null;
            cityLargest: string | null;
            countyName: string | null;
            population: number | null;
            density: number | null;
            incomeHouseholdMedian: number | null;
            unemploymentRate: number | null;
            homeValue: number | null;
            parentId: string | null;
        } | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        brDatabaseId: number | null;
        slug: string;
        state: string;
        salary: string | null;
        normalizedPositionName: string | null;
        positionDescription: string | null;
        brHashId: string | null;
        electionDate: Date;
        positionGeoid: string | null;
        positionLevel: import(".prisma/client").$Enums.PositionLevel;
        positionNames: string[];
        filingOfficeAddress: string | null;
        filingPhoneNumber: string | null;
        paperworkInstructions: string | null;
        filingRequirements: string | null;
        isRunoff: boolean | null;
        isPrimary: boolean | null;
        partisanType: string | null;
        filingDateStart: Date | null;
        filingDateEnd: Date | null;
        employmentType: string | null;
        eligibilityRequirements: string | null;
        subAreaName: string | null;
        subAreaValue: string | null;
        frequency: number[];
        placeId: string | null;
        Candidacies: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            brDatabaseId: number;
            slug: string;
            firstName: string;
            lastName: string;
            party: string | null;
            placeName: string | null;
            state: string | null;
            image: string | null;
            about: string | null;
            urls: string[];
            electionFrequency: number[];
            salary: string | null;
            normalizedPositionName: string | null;
            positionName: string | null;
            positionDescription: string | null;
            raceId: string | null;
        }[];
        _count: {
            Place: number;
            Candidacies: number;
        };
    }[]>;
    private buildPlaceInclude;
    private buildCandidacyInclude;
}
export {};
